import 'dart:io';
import 'package:flutter/material.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:image_picker/image_picker.dart';
import 'package:record/record.dart';
import 'package:audioplayers/audioplayers.dart'; // استيراد حزمة التشغيل الصوتي
import 'massege_container.dart';

class ContainerText extends StatefulWidget {
  const ContainerText({super.key, required Future<void> Function(ImageSource source) onImageSelected});

  @override
  State<ContainerText> createState() => _ContainerTextState();
}

class _ContainerTextState extends State<ContainerText> {
  TextEditingController messageController = TextEditingController();
  List<Map<String, dynamic>> messages = [];
  final Record _record = Record();
  bool _isRecording = false;
  final AudioPlayer _audioPlayer = AudioPlayer();

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addPostFrameCallback((_) {
      setState(() {
        messages.add({
          "text": "مرحبًا! كيف يمكنني مساعدتك اليوم؟ 😊",
          "isSender": false,
          "type": "text",
          "time": DateTime.now().toString(), // إضافة الوقت
        });
      });
    });
  }

  void _showOption() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('اختر مصدر الصورة'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            ListTile(
              leading: const Icon(Icons.image),
              title: const Text('المعرض'),
              onTap: () {
                Navigator.pop(context);
                pickImage(ImageSource.gallery);
              },
            ),
            ListTile(
              leading: const Icon(Icons.camera),
              title: const Text('الكاميرا'),
              onTap: () {
                Navigator.pop(context);
                pickImage(ImageSource.camera);
              },
            ),
          ],
        ),
      ),
    );
  }
  void sendMessage() {
    if (messageController.text.isNotEmpty) {
      setState(() {
        messages.insert(0, {
          "text": messageController.text,
          "isSender": true,
          "type": "text",
          "time": DateTime.now().toString(), // إضافة الوقت
        });
        messageController.clear();
      });
      Future.delayed(const Duration(seconds: 1), () {
        setState(() {
          messages.insert(0, {
            "text": "لقد تلقيت رسالتك! كيف يمكنني مساعدتك؟ 🤖",
            "isSender": false,
            "type": "text",
            "time": DateTime.now().toString(), // إضافة الوقت
          });
        });
      });
    }
  }

  Future<void> pickImage(ImageSource source) async {
    final picker = ImagePicker();
    final pickedFile = await picker.pickImage(source: source);

    if (pickedFile != null) {
      setState(() {
        messages.insert(0, {
          "image": File(pickedFile.path),
          "isSender": true,
          "type": "image",
          "time": DateTime.now().toString(), // إضافة الوقت
        });
      });

      Future.delayed(const Duration(seconds: 1), () {
        setState(() {
          messages.insert(0, {
            "text": "لقد استلمت صورتك! 📷 شكرًا لإرسالها.",
            "isSender": false,
            "type": "text",
            "time": DateTime.now().toString(), // إضافة الوقت
          });
        });
      });
    }
  }

  void _toggleRecording() async {
    if (_isRecording) {
      final path = await _record.stop();
      setState(() {
        _isRecording = false;
      });

      if (path != null) {
        setState(() {
          messages.insert(0, {
            "audio": File(path),
            "isSender": true,
            "type": "audio",
            "time": DateTime.now().toString(), // إضافة الوقت
          });
        });

        Future.delayed(const Duration(seconds: 1), () {
          setState(() {
            messages.insert(0, {
              "text": "لقد استلمت تسجيلك الصوتي! 🎤 شكرًا لإرساله.",
              "isSender": false,
              "type": "text",
              "time": DateTime.now().toString(), // إضافة الوقت
            });
          });
        });
      }
    } else {
      await _record.start();
      setState(() {
        _isRecording = true;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        Expanded(
          child: ListView.builder(
            padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 5),
            reverse: true,
            itemCount: messages.length,
            itemBuilder: (context, index) {
              final message = messages[index];
              return Align(
                alignment: message["isSender"]
                    ? Alignment.centerRight
                    : Alignment.centerLeft,
                child: MessageContainer(
                  message: message["text"] ?? "",
                  image: message["image"],
                  audio: message["audio"],
                  isSender: message["isSender"],
                  type: message["type"],
                  time: message["time"], // تمرير الوقت
                ),
              );
            },
          ),
        ),
        Align(
          alignment: Alignment.bottomCenter,
          child: Material(
            elevation: 4,
            shadowColor: Colors.grey,
            borderRadius: BorderRadius.circular(17),
            child: Container(
              width: 360,
              height: 72,
              padding: const EdgeInsets.symmetric(horizontal: 3),
              decoration: BoxDecoration(
                border: Border.all(color: const Color(0xFFA8BBB3)),
                color: const Color(0xFFDDE5E5).withOpacity(0.8),
                borderRadius: BorderRadius.circular(17),
              ),
              child: Row(
                children: [
                  SizedBox(width: 5),
                  CircleAvatar(
                    radius: 20,
                    backgroundColor:  Colors.white,
                    child: IconButton(
                      icon: _isRecording
                          ? const Icon(Icons.stop, color: Color(0xFF00643A), size: 24)
                          : const Icon(Icons.mic, color: Color(0xFF00643A), size: 24),
                      onPressed: _toggleRecording,
                    ),
                  ),
                  SizedBox(width: 10),
                  Expanded(
                    child: Container(
                      constraints: const BoxConstraints(minHeight: 42),
                      padding: const EdgeInsets.symmetric(horizontal: 10),
                      decoration: BoxDecoration(
                        color: const Color(0xFFA8BBB3).withOpacity(0.72),
                        borderRadius: BorderRadius.circular(18),
                      ),
                      child: Row(
                        children: [
                          Expanded(
                            child: TextField(
                              controller: messageController,
                              maxLines: null,
                              decoration: const InputDecoration(
                                hintText: "Type your message",
                                hintStyle: TextStyle(color: Color.fromRGBO(0, 0, 0, 0.49),
                                    fontSize: 15),
                                border: InputBorder.none,
                              ),
                              style: const TextStyle(color: Color.fromRGBO(0, 0, 0, 0.49)),
                            ),
                          ),
                          IconButton(
                            icon: SvgPicture.asset('assets/icons/Vector.svg'),
                            onPressed: _showOption,
                          ),
                        ],
                      ),

                    ),
                  ),
                  IconButton(
                    icon: const Icon(Icons.send, color: Color(0xFF00643A), size: 24),
                    onPressed: sendMessage,
                  ),
                ],
              ),
            ),
          ),
        ),
      ],
    );
  }
}